name: AI-Enhanced Screenshot Job Hunter (NVIDIA & Intel)

on:
  schedule:
    # Run every 20 minutes, but skip 00:00-08:00 (runs from 08:00-23:59)
    - cron: '*/20 8-23 * * *'    # Run at :00, :20, :40 of hours 8-23
    
  workflow_dispatch: # Allow manual trigger from GitHub Actions tab

permissions:
  contents: write  # Allow pushing commits back to repository

jobs:
  hunt-jobs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # Cache the entire Python environment including installed packages
    - name: Cache Python environment
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ${{ env.pythonLocation }}
        key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ env.pythonLocation }}-
          ${{ runner.os }}-python-
        
    # Cache Chrome installation to avoid reinstalling every time
    - name: Cache Chrome installation
      id: cache-chrome
      uses: actions/cache@v4
      with:
        path: |
          /opt/google/chrome
          /usr/bin/google-chrome*
        key: ${{ runner.os }}-chrome-stable-${{ hashFiles('.github/workflows/nvidia-job-hunter.yml') }}
        restore-keys: |
          ${{ runner.os }}-chrome-stable-
        
    - name: Setup Chrome for Screenshots
      if: steps.cache-chrome.outputs.cache-hit != 'true'
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable
      continue-on-error: true
        
    - name: Install Chrome (fallback method)
      if: steps.cache-chrome.outputs.cache-hit != 'true' && failure()
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
    # Cache system dependencies to avoid reinstalling every time
    - name: Cache system dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: ${{ runner.os }}-apt-deps-${{ hashFiles('.github/workflows/nvidia-job-hunter.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-deps-
        
    - name: Install Chrome dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libgbm1 \
          libxss1 \
          libatk-bridge2.0-0 \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 || echo "Some dependencies failed, continuing..."
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # Check if packages are already installed to skip if cached
        pip list | grep -E "(selenium|google-generativeai|Pillow|requests)" > /dev/null && echo "Packages already installed" || pip install -r screenshot-version/requirements.txt
        
    - name: Restore previous state from cache
      uses: actions/cache/restore@v4
      with:
        path: |
          screenshot-version/screenshot_jobs_state.json
          screenshot-version/nvidia_screenshot.txt
          screenshot-version/intel_screenshot.txt
        key: screenshot-job-hunter-state-${{ github.run_number }}
        restore-keys: |
          screenshot-job-hunter-state-
          multi-job-hunter-state-
        
    - name: Debug cache files before run
      run: |
        echo "=== Cache Debug Info ==="
        echo "Working directory: $(pwd)"
        echo "Contents of repository root:"
        ls -la
        echo "Contents of screenshot-version:"
        ls -la screenshot-version/ || echo "screenshot-version directory not found"
        echo "Checking for screenshot files:"
        find . -name "*screenshot*.txt" -o -name "*screenshot*.json" | head -10
        
    - name: Run AI-Enhanced Screenshot Job Hunter
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        USE_AI_ANALYSIS: 'true'
        CHANGE_THRESHOLD: '0.5'
        SAVE_DEBUG_IMAGES: 'false'
      run: |
        cd screenshot-version
        python jobHunt_screenshot.py
        
    - name: Ensure cache files exist and are valid
      if: always()
      run: |
        cd screenshot-version
        echo "=== Ensuring cache files exist ==="
        
        # Create empty files if they don't exist
        [ ! -f screenshot_jobs_state.json ] && echo "{}" > screenshot_jobs_state.json
        [ ! -f nvidia_screenshot.txt ] && echo "" > nvidia_screenshot.txt
        [ ! -f intel_screenshot.txt ] && echo "" > intel_screenshot.txt
        
        # Verify files exist and have content
        echo "Files after ensuring existence:"
        ls -la screenshot_jobs_state.json nvidia_screenshot.txt intel_screenshot.txt 2>/dev/null || echo "Some files missing"
        
        # Check if state file is valid JSON
        if [ -f screenshot_jobs_state.json ]; then
          python -c "import json; json.load(open('screenshot_jobs_state.json'))" 2>/dev/null && echo "✅ State file is valid JSON" || echo "⚠️ State file is not valid JSON"
        fi
        
    - name: Debug cache files after run
      if: always()
      run: |
        echo "=== Files created after run ==="
        echo "Contents of screenshot-version:"
        ls -la screenshot-version/ || echo "screenshot-version directory not found"
        echo "Screenshot files with sizes:"
        find screenshot-version/ -name "*screenshot*.txt" -exec ls -lh {} \; 2>/dev/null || echo "No screenshot files found"
        echo "Screenshot file line counts:"
        find screenshot-version/ -name "*screenshot*.txt" -exec wc -l {} \; 2>/dev/null || echo "No screenshot files found"
        echo "State file contents:"
        if [ -f screenshot-version/screenshot_jobs_state.json ]; then
          echo "State file size: $(ls -lh screenshot-version/screenshot_jobs_state.json)"
          echo "State file preview:"
          head -20 screenshot-version/screenshot_jobs_state.json 2>/dev/null || echo "Could not read state file"
        else
          echo "No state file found"
        fi
      
    - name: Save state to cache
      uses: actions/cache/save@v4
      if: always()
      with:
        path: |
          screenshot-version/screenshot_jobs_state.json
          screenshot-version/nvidia_screenshot.txt
          screenshot-version/intel_screenshot.txt
        key: screenshot-job-hunter-state-${{ github.run_number }}
        
    - name: Upload debug files as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshot-job-hunter-debug-${{ github.run_number }}
        path: |
          screenshot-version/*.log
          screenshot-version/screenshot_jobs_state.json
          screenshot-version/debug_*.png
          screenshot-version/*.txt
        retention-days: 7
        if-no-files-found: ignore